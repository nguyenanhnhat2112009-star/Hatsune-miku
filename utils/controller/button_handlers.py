"""
Enhanced Button Handlers for Music Player Controller
X·ª≠ l√Ω c√°c t∆∞∆°ng t√°c button cho music player controller
"""

from disnake import MessageInteraction, ButtonStyle
from typing import TYPE_CHECKING
import asyncio

if TYPE_CHECKING:
    from musicCore import MusicPlayer

class PlayerButtonHandlers:
    """Class x·ª≠ l√Ω c√°c button interactions cho music player"""
    
    @staticmethod
    async def handle_pause_resume(interaction: MessageInteraction, player: 'MusicPlayer'):
        """X·ª≠ l√Ω button pause/resume"""
        try:
            if player.paused:
                await player.resume()
                await interaction.response.send_message("‚ñ∂Ô∏è ƒê√£ ti·∫øp t·ª•c ph√°t nh·∫°c!", ephemeral=True)
            else:
                await player.pause()
                await interaction.response.send_message("‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng nh·∫°c!", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)
    
    @staticmethod
    async def handle_stop(interaction: MessageInteraction, player: 'MusicPlayer'):
        """X·ª≠ l√Ω button stop"""
        try:
            await player.stop()
            await interaction.response.send_message("‚èπÔ∏è ƒê√£ d·ª´ng ph√°t nh·∫°c v√† ng·∫Øt k·∫øt n·ªëi!", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)
    
    @staticmethod
    async def handle_previous(interaction: MessageInteraction, player: 'MusicPlayer'):
        """X·ª≠ l√Ω button previous track"""
        try:
            if len(player.queue.played) == 0:
                await interaction.response.send_message("‚ùå Kh√¥ng c√≥ b√†i h√°t tr∆∞·ªõc ƒë√≥!", ephemeral=True)
                return
            
            await player.previous()
            await interaction.response.send_message("‚èÆÔ∏è ƒê√£ chuy·ªÉn v·ªÅ b√†i h√°t tr∆∞·ªõc!", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)
    
    @staticmethod
    async def handle_next(interaction: MessageInteraction, player: 'MusicPlayer'):
        """X·ª≠ l√Ω button next track"""
        try:
            if len(player.queue.next_track) == 0:
                await interaction.response.send_message("‚ùå Kh√¥ng c√≥ b√†i h√°t ti·∫øp theo!", ephemeral=True)
                return
            
            await player.skip()
            await interaction.response.send_message("‚è≠Ô∏è ƒê√£ chuy·ªÉn sang b√†i h√°t ti·∫øp theo!", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)
    
    @staticmethod
    async def handle_volume_down(interaction: MessageInteraction, player: 'MusicPlayer'):
        """X·ª≠ l√Ω button volume down"""
        try:
            new_volume = max(0, player.player_volume - 10)
            await player.set_volume(new_volume)
            await interaction.response.send_message(f"üîâ √Çm l∆∞·ª£ng: {new_volume}%", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)
    
    @staticmethod
    async def handle_volume_up(interaction: MessageInteraction, player: 'MusicPlayer'):
        """X·ª≠ l√Ω button volume up"""
        try:
            new_volume = min(100, player.player_volume + 10)
            await player.set_volume(new_volume)
            await interaction.response.send_message(f"üîä √Çm l∆∞·ª£ng: {new_volume}%", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)
    
    @staticmethod
    async def handle_loop(interaction: MessageInteraction, player: 'MusicPlayer'):
        """X·ª≠ l√Ω button loop mode"""
        try:
            from utils.conv import LoopMODE
            
            if player.queue.loop == LoopMODE.OFF:
                player.queue.loop = LoopMODE.SONG
                message = "üîÇ ƒê√£ b·∫≠t l·∫∑p b√†i h√°t hi·ªán t·∫°i!"
            elif player.queue.loop == LoopMODE.SONG:
                player.queue.loop = LoopMODE.PLAYLIST
                message = "üîÅ ƒê√£ b·∫≠t l·∫∑p danh s√°ch ph√°t!"
            else:
                player.queue.loop = LoopMODE.OFF
                message = "‚û°Ô∏è ƒê√£ t·∫Øt ch·∫ø ƒë·ªô l·∫∑p!"
            
            await interaction.response.send_message(message, ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)
    
    @staticmethod
    async def handle_shuffle(interaction: MessageInteraction, player: 'MusicPlayer'):
        """X·ª≠ l√Ω button shuffle"""
        try:
            player.queue.shuffle = not player.queue.shuffle
            status = "b·∫≠t" if player.queue.shuffle else "t·∫Øt"
            emoji = "üîÄ" if player.queue.shuffle else "üìã"
            await interaction.response.send_message(f"{emoji} ƒê√£ {status} ch·∫ø ƒë·ªô tr·ªôn b√†i!", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)
    
    @staticmethod
    async def handle_autoplay(interaction: MessageInteraction, player: 'MusicPlayer'):
        """X·ª≠ l√Ω button autoplay"""
        try:
            player.is_autoplay_mode = not player.is_autoplay_mode
            status = "b·∫≠t" if player.is_autoplay_mode else "t·∫Øt"
            emoji = "‚ôªÔ∏è" if player.is_autoplay_mode else "‚èπÔ∏è"
            await interaction.response.send_message(f"{emoji} ƒê√£ {status} ch·∫ø ƒë·ªô t·ª± ƒë·ªông ph√°t!", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)
    
    @staticmethod
    async def handle_queue(interaction: MessageInteraction, player: 'MusicPlayer'):
        """X·ª≠ l√Ω button queue - hi·ªÉn th·ªã h√†ng ƒë·ª£i"""
        try:
            from disnake import Embed
            from utils.conv import trim_text, time_format
            
            embed = Embed(title="üìã H√†ng ƒë·ª£i ph√°t nh·∫°c", color=0x00ff00)
            
            # B√†i ƒëang ph√°t
            if player.current:
                embed.add_field(
                    name="üéµ ƒêang ph√°t",
                    value=f"**{trim_text(player.current.title, 50)}**\nüë§ {trim_text(player.current.author, 30)}",
                    inline=False
                )
            
            # B√†i ti·∫øp theo
            if player.queue.next_track:
                next_songs = []
                for i, track in enumerate(player.queue.next_track[:5]):  # Hi·ªÉn th·ªã 5 b√†i ƒë·∫ßu
                    next_songs.append(f"`{i+1}.` **{trim_text(track.title, 40)}**")
                
                if len(player.queue.next_track) > 5:
                    next_songs.append(f"... v√† {len(player.queue.next_track) - 5} b√†i kh√°c")
                
                embed.add_field(
                    name="‚è≠Ô∏è Ti·∫øp theo",
                    value="\n".join(next_songs),
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚è≠Ô∏è Ti·∫øp theo",
                    value="*Kh√¥ng c√≥ b√†i h√°t trong h√†ng ƒë·ª£i*",
                    inline=False
                )
            
            # Th·ªëng k√™
            total_duration = sum(track.length for track in player.queue.next_track if not track.stream)
            embed.set_footer(text=f"üìä T·ªïng c·ªông: {len(player.queue.next_track)} b√†i ‚Ä¢ {time_format(total_duration)}")
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)

# Dictionary mapping custom_id to handler functions
BUTTON_HANDLERS = {
    "player_controller_pause_resume_btn": PlayerButtonHandlers.handle_pause_resume,
    "player_controller_stop_btn": PlayerButtonHandlers.handle_stop,
    "player_controller_prev_track_btn": PlayerButtonHandlers.handle_previous,
    "player_controller_next_track_btn": PlayerButtonHandlers.handle_next,
    "player_controller_volume_down_btn": PlayerButtonHandlers.handle_volume_down,
    "player_controller_volume_up_btn": PlayerButtonHandlers.handle_volume_up,
    "player_controller_loop_btn": PlayerButtonHandlers.handle_loop,
    "player_controller_shuffle_btn": PlayerButtonHandlers.handle_shuffle,
    "player_controller_autoplay_btn": PlayerButtonHandlers.handle_autoplay,
    "player_controller_queue_btn": PlayerButtonHandlers.handle_queue,
}

async def handle_button_interaction(interaction: MessageInteraction):
    """Main function ƒë·ªÉ x·ª≠ l√Ω button interactions"""
    custom_id = interaction.data.custom_id
    
    # L·∫•y player t·ª´ guild
    player = interaction.guild.voice_client
    if not player:
        await interaction.response.send_message("‚ùå Bot kh√¥ng ƒëang ph√°t nh·∫°c!", ephemeral=True)
        return
    
    # Ki·ªÉm tra quy·ªÅn
    if not interaction.author.voice or interaction.author.voice.channel != player.channel:
        await interaction.response.send_message("‚ùå B·∫°n ph·∫£i ·ªü c√πng k√™nh voice v·ªõi bot!", ephemeral=True)
        return
    
    # X·ª≠ l√Ω button
    handler = BUTTON_HANDLERS.get(custom_id)
    if handler:
        await handler(interaction, player)
    else:
        await interaction.response.send_message("‚ùå Button kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!", ephemeral=True)
