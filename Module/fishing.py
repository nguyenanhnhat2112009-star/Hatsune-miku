from __future__ import annotations

import asyncio
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from disnake.ext import commands
from disnake import Embed, ApplicationCommandInteraction, Option, MessageFlags, ButtonStyle
try:
    from disnake import SelectOption
except ImportError:
    # Fallback for older disnake versions
    SelectOption = None
from disnake.ui import View, Button, Select
import disnake

from utils.ClientUser import ClientUser


class Fishing(commands.Cog):
    def __init__(self, bot):
        self.bot: ClientUser = bot
        
        # Database gi·∫£ l·∫≠p cho fishing data
        self.fishing_data = {}
        
        # Danh s√°ch c√°c lo·∫°i c√°
        self.fish_types = {
            "üêü": {"name": "C√° nh·ªè", "rarity": "common", "price": 10, "chance": 40},
            "üê†": {"name": "C√° nhi·ªát ƒë·ªõi", "rarity": "common", "price": 15, "chance": 30},
            "üê°": {"name": "C√° n√≥c", "rarity": "uncommon", "price": 25, "chance": 15},
            "ü¶à": {"name": "C√° m·∫≠p", "rarity": "rare", "price": 100, "chance": 5},
            "üêô": {"name": "B·∫°ch tu·ªôc", "rarity": "rare", "price": 80, "chance": 7},
            "ü¶û": {"name": "T√¥m h√πm", "rarity": "epic", "price": 200, "chance": 2},
            "üêã": {"name": "C√° voi", "rarity": "legendary", "price": 500, "chance": 0.8},
            "ü¶ë": {"name": "M·ª±c kh·ªïng l·ªì", "rarity": "legendary", "price": 600, "chance": 0.2}
        }
        
        # Lo·∫°i c·∫ßn c√¢u
        self.fishing_rods = {
            1: {"name": "C·∫ßn c√¢u tre", "price": 0, "bonus": 0, "emoji": "üé£"},
            2: {"name": "C·∫ßn c√¢u s·∫Øt", "price": 500, "bonus": 10, "emoji": "üé£"},
            3: {"name": "C·∫ßn c√¢u v√†ng", "price": 2000, "bonus": 25, "emoji": "‚ú®"},
            4: {"name": "C·∫ßn c√¢u kim c∆∞∆°ng", "price": 10000, "bonus": 50, "emoji": "üíé"},
            5: {"name": "C·∫ßn c√¢u huy·ªÅn tho·∫°i", "price": 50000, "bonus": 100, "emoji": "üåü"}
        }

    def get_user_data(self, user_id: int) -> Dict:
        """L·∫•y d·ªØ li·ªáu ng∆∞·ªùi ch∆°i"""
        if user_id not in self.fishing_data:
            self.fishing_data[user_id] = {
                "money": 100,
                "fish_caught": {},
                "rod_level": 1,
                "last_fish": None,
                "total_caught": 0,
                "achievements": []
            }
        return self.fishing_data[user_id]

    def can_fish(self, user_id: int) -> bool:
        """Ki·ªÉm tra c√≥ th·ªÉ c√¢u c√° kh√¥ng (cooldown)"""
        data = self.get_user_data(user_id)
        if data["last_fish"] is None:
            return True
        
        cooldown = timedelta(seconds=30)  # 30 gi√¢y cooldown
        return datetime.now() - data["last_fish"] >= cooldown

    def catch_fish(self, user_id: int) -> Optional[str]:
        """Logic c√¢u c√°"""
        data = self.get_user_data(user_id)
        rod_bonus = self.fishing_rods[data["rod_level"]]["bonus"]
        
        # T√≠nh to√°n x√°c su·∫•t v·ªõi bonus t·ª´ c·∫ßn c√¢u
        total_chance = 0
        for fish_emoji, fish_data in self.fish_types.items():
            adjusted_chance = fish_data["chance"] + (rod_bonus * 0.1)
            if random.random() * 100 < adjusted_chance:
                # C√¢u ƒë∆∞·ª£c c√°!
                data["last_fish"] = datetime.now()
                data["total_caught"] += 1
                
                if fish_emoji not in data["fish_caught"]:
                    data["fish_caught"][fish_emoji] = 0
                data["fish_caught"][fish_emoji] += 1
                
                return fish_emoji
        
        # Kh√¥ng c√¢u ƒë∆∞·ª£c g√¨
        data["last_fish"] = datetime.now()
        return None

    @commands.slash_command(name="fish", description="üé£ C√¢u c√° ƒë·ªÉ ki·∫øm ti·ªÅn!")
    async def fish(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        
        user_data = self.get_user_data(inter.author.id)
        
        # Ki·ªÉm tra cooldown
        if not self.can_fish(inter.author.id):
            cooldown_left = 30 - (datetime.now() - user_data["last_fish"]).seconds
            embed = Embed(
                title="‚è∞ Ch·ªù m·ªôt ch√∫t!",
                description=f"B·∫°n c·∫ßn ch·ªù **{cooldown_left}** gi√¢y n·ªØa m·ªõi c√≥ th·ªÉ c√¢u c√° ti·∫øp!",
                color=0xFFFF00
            )
            await inter.edit_original_response(embed=embed)
            return
        
        # Th·ª±c hi·ªán c√¢u c√°
        embed = Embed(
            title="üé£ ƒêang c√¢u c√°...",
            description="B·∫°n ƒëang th·∫£ c·∫ßn xu·ªëng n∆∞·ªõc...",
            color=0x00FFFF
        )
        await inter.edit_original_response(embed=embed)
        
        # Delay ƒë·ªÉ t·∫°o c·∫£m gi√°c h·ªìi h·ªôp
        await asyncio.sleep(2)
        
        caught_fish = self.catch_fish(inter.author.id)
        
        if caught_fish:
            fish_info = self.fish_types[caught_fish]
            user_data["money"] += fish_info["price"]
            
            # T·∫°o embed th√†nh c√¥ng
            embed = Embed(
                title="üéâ C√¢u ƒë∆∞·ª£c c√°!",
                description=f"B·∫°n ƒë√£ c√¢u ƒë∆∞·ª£c {caught_fish} **{fish_info['name']}**!\n"
                           f"üí∞ Ki·∫øm ƒë∆∞·ª£c: **{fish_info['price']}** xu\n"
                           f"üíµ T·ªïng ti·ªÅn: **{user_data['money']}** xu",
                color=0x00FF00
            )
            
            # Th√™m th√¥ng tin ƒë·ªô hi·∫øm
            rarity_colors = {
                "common": "üü¢",
                "uncommon": "üü°", 
                "rare": "üü†",
                "epic": "üü£",
                "legendary": "üî¥"
            }
            rarity_color = rarity_colors.get(fish_info["rarity"], "‚ö™")
            embed.add_field(
                name="ƒê·ªô hi·∫øm",
                value=f"{rarity_color} {fish_info['rarity'].title()}",
                inline=True
            )
            
        else:
            embed = Embed(
                title="üòî Kh√¥ng c√¢u ƒë∆∞·ª£c g√¨",
                description="C√° kh√¥ng c·∫Øn c√¢u l·∫ßn n√†y. H√£y th·ª≠ l·∫°i sau!",
                color=0xFF0000
            )
        
        # Th√™m th√¥ng tin c·∫ßn c√¢u hi·ªán t·∫°i
        rod_info = self.fishing_rods[user_data["rod_level"]]
        embed.add_field(
            name="C·∫ßn c√¢u hi·ªán t·∫°i",
            value=f"{rod_info['emoji']} {rod_info['name']}",
            inline=True
        )
        
        await inter.edit_original_response(embed=embed)

    @commands.slash_command(name="inventory", description="üéí Xem t√∫i ƒë·ªì c√¢u c√° c·ªßa b·∫°n")
    async def inventory(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        
        user_data = self.get_user_data(inter.author.id)
        
        embed = Embed(
            title=f"üéí T√∫i ƒë·ªì c·ªßa {inter.author.display_name}",
            color=0x7289DA
        )
        
        # Th√¥ng tin ti·ªÅn v√† c·∫ßn c√¢u
        rod_info = self.fishing_rods[user_data["rod_level"]]
        embed.add_field(
            name="üí∞ Th√¥ng tin t√†i kho·∫£n",
            value=f"üíµ Ti·ªÅn: **{user_data['money']}** xu\n"
                  f"üé£ C·∫ßn c√¢u: {rod_info['emoji']} {rod_info['name']}\n"
                  f"üêü T·ªïng c√° c√¢u ƒë∆∞·ª£c: **{user_data['total_caught']}**",
            inline=False
        )
        
        # Danh s√°ch c√° ƒë√£ c√¢u
        if user_data["fish_caught"]:
            fish_list = ""
            total_value = 0
            
            for fish_emoji, count in user_data["fish_caught"].items():
                fish_info = self.fish_types[fish_emoji]
                value = count * fish_info["price"]
                total_value += value
                fish_list += f"{fish_emoji} **{fish_info['name']}** x{count} (üí∞ {value} xu)\n"
            
            embed.add_field(
                name="üêü C√° ƒë√£ c√¢u ƒë∆∞·ª£c",
                value=fish_list,
                inline=False
            )
            
            embed.add_field(
                name="üíé T·ªïng gi√° tr·ªã",
                value=f"**{total_value}** xu",
                inline=True
            )
        else:
            embed.add_field(
                name="üêü C√° ƒë√£ c√¢u ƒë∆∞·ª£c",
                value="Ch∆∞a c√¢u ƒë∆∞·ª£c c√° n√†o. H√£y d√πng `/fish` ƒë·ªÉ b·∫Øt ƒë·∫ßu!",
                inline=False
            )
        
        await inter.edit_original_response(embed=embed)

    @commands.slash_command(name="fishmarket", description="üè™ C·ª≠a h√†ng c√¢u c√°")
    async def fish_market(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        
        user_data = self.get_user_data(inter.author.id)
        
        class FishMarketView(View):
            def __init__(self, fishing_game):
                super().__init__(timeout=300)
                self.fishing_game = fishing_game
                
            @disnake.ui.select(
                placeholder="Ch·ªçn h√†nh ƒë·ªông...",
                options=[
                    SelectOption(
                        label="B√°n t·∫•t c·∫£ c√°",
                        description="B√°n to√†n b·ªô c√° trong t√∫i ƒë·ªì",
                        emoji="üí∞",
                        value="sell_all"
                    ),
                    SelectOption(
                        label="N√¢ng c·∫•p c·∫ßn c√¢u",
                        description="Mua c·∫ßn c√¢u t·ªët h∆°n",
                        emoji="‚¨ÜÔ∏è",
                        value="upgrade_rod"
                    ),
                    SelectOption(
                        label="Xem b·∫£ng x·∫øp h·∫°ng",
                        description="Top ng∆∞·ªùi c√¢u c√° gi·ªèi nh·∫•t",
                        emoji="üèÜ",
                        value="leaderboard"
                    )
                ]
            )
            async def market_select(self, select: Select, interaction: disnake.MessageInteraction):
                await interaction.response.defer(ephemeral=True)
                
                user_data = self.fishing_game.get_user_data(interaction.author.id)
                
                if select.values[0] == "sell_all":
                    if not user_data["fish_caught"]:
                        embed = Embed(
                            title="‚ùå Kh√¥ng c√≥ c√° ƒë·ªÉ b√°n",
                            description="B·∫°n ch∆∞a c√≥ c√° n√†o trong t√∫i ƒë·ªì!",
                            color=0xFF0000
                        )
                    else:
                        total_money = 0
                        fish_sold = ""
                        
                        for fish_emoji, count in user_data["fish_caught"].items():
                            fish_info = self.fishing_game.fish_types[fish_emoji]
                            money = count * fish_info["price"]
                            total_money += money
                            fish_sold += f"{fish_emoji} {fish_info['name']} x{count} = {money} xu\n"
                        
                        user_data["money"] += total_money
                        user_data["fish_caught"] = {}
                        
                        embed = Embed(
                            title="üí∞ ƒê√£ b√°n c√° th√†nh c√¥ng!",
                            description=f"**C√° ƒë√£ b√°n:**\n{fish_sold}\n"
                                       f"üíµ T·ªïng ti·ªÅn nh·∫≠n ƒë∆∞·ª£c: **{total_money}** xu\n"
                                       f"üí∞ Ti·ªÅn hi·ªán t·∫°i: **{user_data['money']}** xu",
                            color=0x00FF00
                        )
                
                elif select.values[0] == "upgrade_rod":
                    current_level = user_data["rod_level"]
                    next_level = current_level + 1
                    
                    if next_level > len(self.fishing_game.fishing_rods):
                        embed = Embed(
                            title="‚ú® C·∫ßn c√¢u ƒë√£ t·ªëi ƒëa!",
                            description="B·∫°n ƒë√£ c√≥ c·∫ßn c√¢u t·ªët nh·∫•t r·ªìi!",
                            color=0xFFD700
                        )
                    else:
                        next_rod = self.fishing_game.fishing_rods[next_level]
                        
                        if user_data["money"] >= next_rod["price"]:
                            user_data["money"] -= next_rod["price"]
                            user_data["rod_level"] = next_level
                            
                            embed = Embed(
                                title="üéâ N√¢ng c·∫•p th√†nh c√¥ng!",
                                description=f"B·∫°n ƒë√£ mua {next_rod['emoji']} **{next_rod['name']}**!\n"
                                           f"üí∞ Ti·ªÅn c√≤n l·∫°i: **{user_data['money']}** xu\n"
                                           f"‚ö° Bonus c√¢u c√°: +{next_rod['bonus']}%",
                                color=0x00FF00
                            )
                        else:
                            embed = Embed(
                                title="‚ùå Kh√¥ng ƒë·ªß ti·ªÅn",
                                description=f"B·∫°n c·∫ßn **{next_rod['price']}** xu ƒë·ªÉ mua {next_rod['emoji']} **{next_rod['name']}**\n"
                                           f"üí∞ Ti·ªÅn hi·ªán t·∫°i: **{user_data['money']}** xu",
                                color=0xFF0000
                            )
                
                elif select.values[0] == "leaderboard":
                    # T·∫°o b·∫£ng x·∫øp h·∫°ng
                    leaderboard = []
                    for user_id, data in self.fishing_game.fishing_data.items():
                        leaderboard.append((user_id, data["total_caught"]))
                    
                    leaderboard.sort(key=lambda x: x[1], reverse=True)
                    
                    lb_text = ""
                    for i, (user_id, count) in enumerate(leaderboard[:10], 1):
                        try:
                            user = self.fishing_game.bot.get_user(user_id)
                            name = user.display_name if user else f"User {user_id}"
                        except:
                            name = f"User {user_id}"
                        
                        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                        lb_text += f"{medal} **{name}**: {count} c√°\n"
                    
                    embed = Embed(
                        title="üèÜ B·∫£ng x·∫øp h·∫°ng c√¢u c√°",
                        description=lb_text or "Ch∆∞a c√≥ ai c√¢u c√°!",
                        color=0xFFD700
                    )
                
                await interaction.edit_original_response(embed=embed)
        
        # T·∫°o embed ch√≠nh cho market
        embed = Embed(
            title="üè™ C·ª≠a h√†ng c√¢u c√°",
            description="Ch√†o m·ª´ng ƒë·∫øn v·ªõi c·ª≠a h√†ng c√¢u c√°!\nCh·ªçn h√†nh ƒë·ªông b·∫°n mu·ªën th·ª±c hi·ªán:",
            color=0x7289DA
        )
        
        # Hi·ªÉn th·ªã th√¥ng tin c·∫ßn c√¢u c√≥ th·ªÉ mua
        rod_info = ""
        current_level = user_data["rod_level"]
        
        for level, rod_data in self.fishing_rods.items():
            if level == current_level:
                rod_info += f"‚úÖ {rod_data['emoji']} **{rod_data['name']}** (ƒêang s·ª≠ d·ª•ng)\n"
            elif level == current_level + 1:
                rod_info += f"üõí {rod_data['emoji']} **{rod_data['name']}** - {rod_data['price']} xu\n"
            elif level > current_level + 1:
                rod_info += f"üîí {rod_data['emoji']} **{rod_data['name']}** (Ch∆∞a m·ªü kh√≥a)\n"
        
        embed.add_field(
            name="üé£ C·∫ßn c√¢u",
            value=rod_info,
            inline=False
        )
        
        embed.add_field(
            name="üí∞ Ti·ªÅn c·ªßa b·∫°n",
            value=f"**{user_data['money']}** xu",
            inline=True
        )
        
        view = FishMarketView(self)
        await inter.edit_original_response(embed=embed, view=view)

    @commands.slash_command(name="fishhelp", description="‚ùì H∆∞·ªõng d·∫´n ch∆°i game c√¢u c√°")
    async def fish_help(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()
        
        embed = Embed(
            title="üé£ H∆∞·ªõng d·∫´n game c√¢u c√°",
            color=0x7289DA
        )
        
        embed.add_field(
            name="üéÆ C√°ch ch∆°i",
            value="‚Ä¢ D√πng `/fish` ƒë·ªÉ c√¢u c√° (cooldown 30 gi√¢y)\n"
                  "‚Ä¢ D√πng `/inventory` ƒë·ªÉ xem t√∫i ƒë·ªì\n"
                  "‚Ä¢ D√πng `/fishmarket` ƒë·ªÉ b√°n c√° v√† n√¢ng c·∫•p\n"
                  "‚Ä¢ D√πng `/fishhelp` ƒë·ªÉ xem h∆∞·ªõng d·∫´n",
            inline=False
        )
        
        embed.add_field(
            name="üêü ƒê·ªô hi·∫øm c√°",
            value="üü¢ **Common**: C√° nh·ªè, c√° nhi·ªát ƒë·ªõi\n"
                  "üü° **Uncommon**: C√° n√≥c\n"
                  "üü† **Rare**: C√° m·∫≠p, b·∫°ch tu·ªôc\n"
                  "üü£ **Epic**: T√¥m h√πm\n"
                  "üî¥ **Legendary**: C√° voi, m·ª±c kh·ªïng l·ªì",
            inline=False
        )
        
        embed.add_field(
            name="üé£ C·∫ßn c√¢u",
            value="N√¢ng c·∫•p c·∫ßn c√¢u ƒë·ªÉ tƒÉng t·ª∑ l·ªá c√¢u ƒë∆∞·ª£c c√° hi·∫øm!\n"
                  "üé£ Tre ‚Üí üé£ S·∫Øt ‚Üí ‚ú® V√†ng ‚Üí üíé Kim c∆∞∆°ng ‚Üí üåü Huy·ªÅn tho·∫°i",
            inline=False
        )
        
        embed.add_field(
            name="üí° M·∫πo",
            value="‚Ä¢ B√°n c√° th∆∞·ªùng xuy√™n ƒë·ªÉ c√≥ ti·ªÅn n√¢ng c·∫•p\n"
                  "‚Ä¢ C·∫ßn c√¢u t·ªët h∆°n = c√° hi·∫øm h∆°n\n"
                  "‚Ä¢ Ki√™n nh·∫´n ƒë·ªÉ c√¢u ƒë∆∞·ª£c c√° legendary!",
            inline=False
        )
        
        await inter.edit_original_response(embed=embed)

    @commands.slash_command(name="dailyfish", description="üéÅ Nh·∫≠n ph·∫ßn th∆∞·ªüng c√¢u c√° h√†ng ng√†y")
    async def daily_fish(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()

        user_data = self.get_user_data(inter.author.id)

        # Ki·ªÉm tra ƒë√£ nh·∫≠n daily ch∆∞a
        today = datetime.now().date()
        last_daily = user_data.get("last_daily")

        if last_daily and last_daily == today:
            embed = Embed(
                title="‚è∞ ƒê√£ nh·∫≠n r·ªìi!",
                description="B·∫°n ƒë√£ nh·∫≠n ph·∫ßn th∆∞·ªüng h√†ng ng√†y h√¥m nay r·ªìi!\nQuay l·∫°i v√†o ng√†y mai nh√©!",
                color=0xFFFF00
            )
            await inter.edit_original_response(embed=embed)
            return

        # T·∫∑ng ph·∫ßn th∆∞·ªüng
        daily_money = random.randint(50, 200)
        user_data["money"] += daily_money
        user_data["last_daily"] = today

        # C√≥ c∆° h·ªôi nh·∫≠n c√° mi·ªÖn ph√≠
        bonus_fish = None
        if random.random() < 0.3:  # 30% c∆° h·ªôi
            fish_list = list(self.fish_types.keys())
            bonus_fish = random.choice(fish_list)

            if bonus_fish not in user_data["fish_caught"]:
                user_data["fish_caught"][bonus_fish] = 0
            user_data["fish_caught"][bonus_fish] += 1

        embed = Embed(
            title="üéÅ Ph·∫ßn th∆∞·ªüng h√†ng ng√†y!",
            description=f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c:\nüí∞ **{daily_money}** xu",
            color=0x00FF00
        )

        if bonus_fish:
            fish_info = self.fish_types[bonus_fish]
            embed.description += f"\nüéâ Bonus: {bonus_fish} **{fish_info['name']}**!"

        embed.add_field(
            name="üíµ T·ªïng ti·ªÅn",
            value=f"**{user_data['money']}** xu",
            inline=True
        )

        await inter.edit_original_response(embed=embed)

    @commands.slash_command(name="fishquest", description="üìã Nhi·ªám v·ª• c√¢u c√°")
    async def fish_quest(self, inter: ApplicationCommandInteraction):
        await inter.response.defer()

        user_data = self.get_user_data(inter.author.id)

        # ƒê·ªãnh nghƒ©a c√°c nhi·ªám v·ª•
        quests = [
            {
                "id": "first_fish",
                "name": "C√° ƒë·∫ßu ti√™n",
                "description": "C√¢u ƒë∆∞·ª£c 1 con c√° b·∫•t k·ª≥",
                "requirement": 1,
                "reward": 100,
                "check": lambda data: data["total_caught"] >= 1
            },
            {
                "id": "fish_collector",
                "name": "Th·ª£ c√¢u c√°",
                "description": "C√¢u ƒë∆∞·ª£c 10 con c√°",
                "requirement": 10,
                "reward": 500,
                "check": lambda data: data["total_caught"] >= 10
            },
            {
                "id": "rare_hunter",
                "name": "Th·ª£ sƒÉn hi·∫øm",
                "description": "C√¢u ƒë∆∞·ª£c 1 con c√° rare tr·ªü l√™n",
                "requirement": 1,
                "reward": 1000,
                "check": lambda data: any(fish in ["ü¶à", "üêô", "ü¶û", "üêã", "ü¶ë"] for fish in data["fish_caught"])
            },
            {
                "id": "master_fisher",
                "name": "B·∫≠c th·∫ßy c√¢u c√°",
                "description": "C√¢u ƒë∆∞·ª£c 50 con c√°",
                "requirement": 50,
                "reward": 2000,
                "check": lambda data: data["total_caught"] >= 50
            }
        ]

        embed = Embed(
            title="üìã Nhi·ªám v·ª• c√¢u c√°",
            description="Ho√†n th√†nh nhi·ªám v·ª• ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng!",
            color=0x7289DA
        )

        completed_quests = user_data.get("completed_quests", [])

        for quest in quests:
            if quest["id"] in completed_quests:
                status = "‚úÖ ƒê√£ ho√†n th√†nh"
            elif quest["check"](user_data):
                status = "üéâ C√≥ th·ªÉ nh·∫≠n th∆∞·ªüng!"
                # T·ª± ƒë·ªông nh·∫≠n th∆∞·ªüng
                if quest["id"] not in completed_quests:
                    user_data["money"] += quest["reward"]
                    completed_quests.append(quest["id"])
                    user_data["completed_quests"] = completed_quests
                    status = f"‚úÖ V·ª´a ho√†n th√†nh! +{quest['reward']} xu"
            else:
                progress = 0
                if quest["id"] == "first_fish" or quest["id"] == "fish_collector" or quest["id"] == "master_fisher":
                    progress = min(user_data["total_caught"], quest["requirement"])
                elif quest["id"] == "rare_hunter":
                    progress = 1 if any(fish in ["ü¶à", "üêô", "ü¶û", "üêã", "ü¶ë"] for fish in user_data["fish_caught"]) else 0

                status = f"üìä Ti·∫øn ƒë·ªô: {progress}/{quest['requirement']}"

            embed.add_field(
                name=f"üéØ {quest['name']}",
                value=f"{quest['description']}\nüí∞ Th∆∞·ªüng: {quest['reward']} xu\n{status}",
                inline=False
            )

        await inter.edit_original_response(embed=embed)


def setup(bot: ClientUser):
    bot.add_cog(Fishing(bot))
