import disnake
from disnake.ext import commands
from datetime import datetime, timedelta
from typing import Optional, Union, Callable
import asyncio
import re
from utils.ClientUser import ClientUser


class PurgeConfirmView(disnake.ui.View):
    def __init__(self, user: disnake.User, purge_func: Callable, **kwargs):
        super().__init__(timeout=30)
        self.user = user
        self.purge_func = purge_func
        self.kwargs = kwargs
        self.confirmed = False

    async def interaction_check(self, interaction: disnake.MessageInteraction) -> bool:
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi d√πng l·ªánh m·ªõi c√≥ th·ªÉ x√°c nh·∫≠n!", ephemeral=True)
            return False
        return True

    @disnake.ui.button(label="‚úÖ X√°c nh·∫≠n", style=disnake.ButtonStyle.danger)
    async def confirm_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        self.confirmed = True
        await interaction.response.edit_message(
            content="üîÑ ƒêang x√≥a tin nh·∫Øn...",
            embed=None,
            view=None
        )

        try:
            await self.purge_func(**self.kwargs)
        except Exception as e:
            await interaction.edit_original_response(
                content=f"‚ùå L·ªói khi x√≥a tin nh·∫Øn: {str(e)}"
            )

    @disnake.ui.button(label="‚ùå H·ªßy b·ªè", style=disnake.ButtonStyle.secondary)
    async def cancel_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        embed = disnake.Embed(
            title="‚ùå ƒê√£ h·ªßy",
            description="Thao t√°c x√≥a tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªè.",
            color=0xff0000
        )
        await interaction.response.edit_message(embed=embed, view=None)

    async def on_timeout(self):
        if not self.confirmed:
            for item in self.children:
                item.disabled = True


class Purge(commands.Cog):
    def __init__(self, bot: ClientUser):
        self.bot = bot

    def _create_purge_embed(self,
                           deleted_count: int,
                           total_requested: int,
                           channel: disnake.TextChannel,
                           user: disnake.User,
                           filter_type: str = "all",
                           target_user: Optional[disnake.User] = None) -> disnake.Embed:
        """Create a beautiful embed for purge results."""

        embed = disnake.Embed(
            title="üßπ X√≥a tin nh·∫Øn th√†nh c√¥ng",
            color=0x00ff00,
            timestamp=datetime.now()
        )

        # Main info
        embed.add_field(
            name="üìä Th·ªëng k√™",
            value=f"""
            **ƒê√£ x√≥a:** `{deleted_count}` tin nh·∫Øn
            **Y√™u c·∫ßu:** `{total_requested}` tin nh·∫Øn
            **Hi·ªáu qu·∫£:** `{(deleted_count/total_requested*100):.1f}%`
            """,
            inline=True
        )

        # Channel info
        embed.add_field(
            name="üìç V·ªã tr√≠",
            value=f"""
            **Channel:** {channel.mention}
            **Lo·∫°i:** `{filter_type}`
            **Th·ªùi gian:** <t:{int(datetime.now().timestamp())}:R>
            """,
            inline=True
        )

        # User info
        user_info = f"**Ng∆∞·ªùi th·ª±c hi·ªán:** {user.mention}\n"
        if target_user:
            user_info += f"**M·ª•c ti√™u:** {target_user.mention}\n"
        user_info += f"**ID:** `{user.id}`"

        embed.add_field(
            name="üë§ Th√¥ng tin",
            value=user_info,
            inline=True
        )

        # Add warning if not all messages were deleted
        if deleted_count < total_requested:
            embed.add_field(
                name="‚ö†Ô∏è L∆∞u √Ω",
                value="M·ªôt s·ªë tin nh·∫Øn c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c x√≥a do:\n‚Ä¢ Tin nh·∫Øn qu√° c≈© (>14 ng√†y)\n‚Ä¢ Quy·ªÅn h·∫°n kh√¥ng ƒë·ªß\n‚Ä¢ Tin nh·∫Øn ƒë√£ b·ªã x√≥a",
                inline=False
            )

        embed.set_footer(
            text=f"Message Cleaner ‚Ä¢ ID: {channel.id}",
            icon_url=self.bot.user.display_avatar.url
        )

        return embed

    async def _safe_purge(self,
                         interaction: disnake.ApplicationCommandInteraction,
                         amount: int,
                         check_func: Optional[Callable] = None,
                         filter_name: str = "all",
                         target_user: Optional[disnake.User] = None):
        """Safely purge messages with proper error handling."""

        try:
            deleted = await interaction.channel.purge(
                limit=amount,
                check=check_func,
                before=datetime.now(),
                oldest_first=False
            )

            embed = self._create_purge_embed(
                deleted_count=len(deleted),
                total_requested=amount,
                channel=interaction.channel,
                user=interaction.author,
                filter_type=filter_name,
                target_user=target_user
            )

            await interaction.edit_original_response(embed=embed)

            # Auto-delete success message after 10 seconds
            await asyncio.sleep(10)
            try:
                await interaction.delete_original_response()
            except:
                pass

        except disnake.Forbidden:
            embed = disnake.Embed(
                title="‚ùå Kh√¥ng c√≥ quy·ªÅn",
                description="Bot kh√¥ng c√≥ quy·ªÅn x√≥a tin nh·∫Øn trong channel n√†y!",
                color=0xff0000
            )
            await interaction.edit_original_response(embed=embed)
        except disnake.HTTPException as e:
            embed = disnake.Embed(
                title="‚ùå L·ªói HTTP",
                description=f"L·ªói khi x√≥a tin nh·∫Øn: {str(e)}",
                color=0xff0000
            )
            await interaction.edit_original_response(embed=embed)
        except Exception as e:
            embed = disnake.Embed(
                title="‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh",
                description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
                color=0xff0000
            )
            await interaction.edit_original_response(embed=embed)

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.has_guild_permissions(manage_messages=True)
    @commands.bot_has_guild_permissions(manage_messages=True)
    @commands.slash_command(name="clear", description="X√≥a tin nh·∫Øn v·ªõi nhi·ªÅu t√πy ch·ªçn l·ªçc")
    async def clear_messages(self,
                            interaction: disnake.ApplicationCommandInteraction,
                            amount: int = commands.Param(description="S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn x√≥a (1-100)", min_value=1, max_value=100),
                            user: Optional[disnake.Member] = commands.Param(default=None, description="Ch·ªâ x√≥a tin nh·∫Øn c·ªßa user n√†y"),
                            contains: Optional[str] = commands.Param(default=None, description="Ch·ªâ x√≥a tin nh·∫Øn ch·ª©a text n√†y"),
                            starts_with: Optional[str] = commands.Param(default=None, description="Ch·ªâ x√≥a tin nh·∫Øn b·∫Øt ƒë·∫ßu b·∫±ng text n√†y"),
                            ends_with: Optional[str] = commands.Param(default=None, description="Ch·ªâ x√≥a tin nh·∫Øn k·∫øt th√∫c b·∫±ng text n√†y"),
                            has_attachments: Optional[bool] = commands.Param(default=None, description="Ch·ªâ x√≥a tin nh·∫Øn c√≥/kh√¥ng c√≥ file ƒë√≠nh k√®m"),
                            has_embeds: Optional[bool] = commands.Param(default=None, description="Ch·ªâ x√≥a tin nh·∫Øn c√≥/kh√¥ng c√≥ embeds"),
                            from_bots: Optional[bool] = commands.Param(default=None, description="Ch·ªâ x√≥a tin nh·∫Øn t·ª´ bot"),
                            confirm: bool = commands.Param(default=True, description="Y√™u c·∫ßu x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a")):
        """Advanced message clearing with multiple filter options."""

        # Build filter description
        filters = []
        if user:
            filters.append(f"üë§ User: {user.mention}")
        if contains:
            filters.append(f"üìù Ch·ª©a: `{contains}`")
        if starts_with:
            filters.append(f"‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu: `{starts_with}`")
        if ends_with:
            filters.append(f"‚èπÔ∏è K·∫øt th√∫c: `{ends_with}`")
        if has_attachments is not None:
            filters.append(f"üìé File: {'C√≥' if has_attachments else 'Kh√¥ng'}")
        if has_embeds is not None:
            filters.append(f"üìã Embed: {'C√≥' if has_embeds else 'Kh√¥ng'}")
        if from_bots is not None:
            filters.append(f"ü§ñ Bot: {'Ch·ªâ bot' if from_bots else 'Kh√¥ng bot'}")

        filter_description = "\n".join(filters) if filters else "Kh√¥ng c√≥ b·ªô l·ªçc (x√≥a t·∫•t c·∫£)"

        # Create check function
        def message_check(message):
            # User filter
            if user and message.author != user:
                return False

            # Content filters
            if contains and contains.lower() not in message.content.lower():
                return False
            if starts_with and not message.content.lower().startswith(starts_with.lower()):
                return False
            if ends_with and not message.content.lower().endswith(ends_with.lower()):
                return False

            # Attachment filter
            if has_attachments is not None:
                if has_attachments and not message.attachments:
                    return False
                if not has_attachments and message.attachments:
                    return False

            # Embed filter
            if has_embeds is not None:
                if has_embeds and not message.embeds:
                    return False
                if not has_embeds and message.embeds:
                    return False

            # Bot filter
            if from_bots is not None:
                if from_bots and not message.author.bot:
                    return False
                if not from_bots and message.author.bot:
                    return False

            return True

        if confirm:
            # Show confirmation embed
            embed = disnake.Embed(
                title="‚ö†Ô∏è X√°c nh·∫≠n x√≥a tin nh·∫Øn",
                description=f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a **{amount}** tin nh·∫Øn v·ªõi c√°c b·ªô l·ªçc sau?",
                color=0xffaa00,
                timestamp=datetime.now()
            )

            embed.add_field(
                name="üìç Channel",
                value=interaction.channel.mention,
                inline=True
            )

            embed.add_field(
                name="üìä S·ªë l∆∞·ª£ng",
                value=f"`{amount}` tin nh·∫Øn",
                inline=True
            )

            embed.add_field(
                name="üîç B·ªô l·ªçc",
                value=filter_description,
                inline=False
            )

            embed.add_field(
                name="‚ö†Ô∏è C·∫£nh b√°o",
                value="‚Ä¢ H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c\n‚Ä¢ Tin nh·∫Øn c≈© h∆°n 14 ng√†y kh√¥ng th·ªÉ x√≥a\n‚Ä¢ Bot c·∫ßn quy·ªÅn Manage Messages",
                inline=False
            )

            embed.set_footer(
                text="Nh·∫•n ‚úÖ ƒë·ªÉ x√°c nh·∫≠n ho·∫∑c ‚ùå ƒë·ªÉ h·ªßy ‚Ä¢ Timeout: 30s",
                icon_url=interaction.author.display_avatar.url
            )

            # Create confirmation view
            view = PurgeConfirmView(
                user=interaction.author,
                purge_func=self._safe_purge,
                interaction=interaction,
                amount=amount,
                check_func=message_check,
                filter_name="filtered",
                target_user=user
            )

            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        else:
            await interaction.response.defer(ephemeral=True)
            await self._safe_purge(
                interaction=interaction,
                amount=amount,
                check_func=message_check,
                filter_name="filtered",
                target_user=user
            )

    @commands.cooldown(1, 15, commands.BucketType.guild)
    @commands.has_guild_permissions(manage_messages=True)
    @commands.bot_has_guild_permissions(manage_messages=True)
    @commands.slash_command(name="purge-bots", description="X√≥a tin nh·∫Øn t·ª´ bot trong channel")
    async def purge_bots(self,
                        interaction: disnake.ApplicationCommandInteraction,
                        amount: int = commands.Param(description="S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn ki·ªÉm tra (1-100)", min_value=1, max_value=100)):
        """Remove messages from bots only."""

        await interaction.response.defer(ephemeral=True)

        def bot_check(message):
            return message.author.bot

        await self._safe_purge(
            interaction=interaction,
            amount=amount,
            check_func=bot_check,
            filter_name="bot messages"
        )

    @commands.cooldown(1, 15, commands.BucketType.guild)
    @commands.has_guild_permissions(manage_messages=True)
    @commands.bot_has_guild_permissions(manage_messages=True)
    @commands.slash_command(name="purge-embeds", description="X√≥a tin nh·∫Øn c√≥ embeds")
    async def purge_embeds(self,
                          interaction: disnake.ApplicationCommandInteraction,
                          amount: int = commands.Param(description="S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn ki·ªÉm tra (1-100)", min_value=1, max_value=100)):
        """Remove messages with embeds."""

        await interaction.response.defer(ephemeral=True)

        def embed_check(message):
            return len(message.embeds) > 0

        await self._safe_purge(
            interaction=interaction,
            amount=amount,
            check_func=embed_check,
            filter_name="messages with embeds"
        )

    @commands.cooldown(1, 15, commands.BucketType.guild)
    @commands.has_guild_permissions(manage_messages=True)
    @commands.bot_has_guild_permissions(manage_messages=True)
    @commands.slash_command(name="purge-files", description="X√≥a tin nh·∫Øn c√≥ file ƒë√≠nh k√®m")
    async def purge_files(self,
                         interaction: disnake.ApplicationCommandInteraction,
                         amount: int = commands.Param(description="S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn ki·ªÉm tra (1-100)", min_value=1, max_value=100)):
        """Remove messages with file attachments."""

        await interaction.response.defer(ephemeral=True)

        def file_check(message):
            return len(message.attachments) > 0

        await self._safe_purge(
            interaction=interaction,
            amount=amount,
            check_func=file_check,
            filter_name="messages with files"
        )

    @commands.cooldown(1, 20, commands.BucketType.guild)
    @commands.has_guild_permissions(manage_messages=True)
    @commands.bot_has_guild_permissions(manage_messages=True)
    @commands.slash_command(name="purge-regex", description="X√≥a tin nh·∫Øn kh·ªõp v·ªõi regex pattern")
    async def purge_regex(self,
                         interaction: disnake.ApplicationCommandInteraction,
                         pattern: str = commands.Param(description="Regex pattern ƒë·ªÉ t√¨m tin nh·∫Øn"),
                         amount: int = commands.Param(description="S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn ki·ªÉm tra (1-100)", min_value=1, max_value=100),
                         case_sensitive: bool = commands.Param(default=False, description="Ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng")):
        """Remove messages matching regex pattern."""

        try:
            # Validate regex pattern
            flags = 0 if case_sensitive else re.IGNORECASE
            compiled_pattern = re.compile(pattern, flags)
        except re.error as e:
            embed = disnake.Embed(
                title="‚ùå Regex kh√¥ng h·ª£p l·ªá",
                description=f"Pattern regex kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:\n```\n{str(e)}\n```",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        await interaction.response.defer(ephemeral=True)

        def regex_check(message):
            return compiled_pattern.search(message.content) is not None

        await self._safe_purge(
            interaction=interaction,
            amount=amount,
            check_func=regex_check,
            filter_name=f"regex: {pattern}"
        )

    @commands.cooldown(1, 30, commands.BucketType.guild)
    @commands.has_guild_permissions(manage_messages=True)
    @commands.bot_has_guild_permissions(manage_messages=True)
    @commands.slash_command(name="purge-old", description="X√≥a tin nh·∫Øn c≈© h∆°n X ng√†y")
    async def purge_old(self,
                       interaction: disnake.ApplicationCommandInteraction,
                       days: int = commands.Param(description="X√≥a tin nh·∫Øn c≈© h∆°n X ng√†y (1-14)", min_value=1, max_value=14),
                       amount: int = commands.Param(description="S·ªë l∆∞·ª£ng tin nh·∫Øn t·ªëi ƒëa c·∫ßn ki·ªÉm tra (1-100)", min_value=1, max_value=100)):
        """Remove messages older than specified days."""

        cutoff_date = datetime.now() - timedelta(days=days)

        await interaction.response.defer(ephemeral=True)

        def age_check(message):
            return message.created_at < cutoff_date

        await self._safe_purge(
            interaction=interaction,
            amount=amount,
            check_func=age_check,
            filter_name=f"older than {days} days"
        )

    @commands.cooldown(1, 5, commands.BucketType.user)
    @commands.slash_command(name="purge-info", description="Th√¥ng tin v·ªÅ c√°c l·ªánh x√≥a tin nh·∫Øn")
    async def purge_info(self, interaction: disnake.ApplicationCommandInteraction):
        """Show information about purge commands."""

        embed = disnake.Embed(
            title="üßπ Message Cleaner - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
            description="H·ªá th·ªëng x√≥a tin nh·∫Øn chuy√™n nghi·ªáp v·ªõi nhi·ªÅu t√πy ch·ªçn l·ªçc",
            color=0x7289da,
            timestamp=datetime.now()
        )

        # Basic commands
        embed.add_field(
            name="üîß L·ªánh c∆° b·∫£n",
            value="""
            `/clear` - X√≥a tin nh·∫Øn v·ªõi b·ªô l·ªçc n√¢ng cao
            `/purge-bots` - X√≥a tin nh·∫Øn t·ª´ bot
            `/purge-embeds` - X√≥a tin nh·∫Øn c√≥ embeds
            `/purge-files` - X√≥a tin nh·∫Øn c√≥ file ƒë√≠nh k√®m
            """,
            inline=False
        )

        # Advanced commands
        embed.add_field(
            name="‚öôÔ∏è L·ªánh n√¢ng cao",
            value="""
            `/purge-regex` - X√≥a tin nh·∫Øn kh·ªõp regex
            `/purge-old` - X√≥a tin nh·∫Øn c≈© h∆°n X ng√†y
            `/purge-info` - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y
            """,
            inline=False
        )

        # Filter options for /clear
        embed.add_field(
            name="üîç B·ªô l·ªçc /clear",
            value="""
            **user** - Ch·ªâ x√≥a tin nh·∫Øn c·ªßa user c·ª• th·ªÉ
            **contains** - Ch·ªâ x√≥a tin nh·∫Øn ch·ª©a text
            **starts_with** - Ch·ªâ x√≥a tin nh·∫Øn b·∫Øt ƒë·∫ßu b·∫±ng text
            **ends_with** - Ch·ªâ x√≥a tin nh·∫Øn k·∫øt th√∫c b·∫±ng text
            **has_attachments** - L·ªçc theo file ƒë√≠nh k√®m
            **has_embeds** - L·ªçc theo embeds
            **from_bots** - L·ªçc theo tin nh·∫Øn t·ª´ bot
            """,
            inline=False
        )

        # Important notes
        embed.add_field(
            name="‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng",
            value="""
            üîí **Quy·ªÅn:** C·∫ßn quy·ªÅn `Manage Messages`
            ‚è∞ **Gi·ªõi h·∫°n:** Ch·ªâ x√≥a ƒë∆∞·ª£c tin nh·∫Øn <14 ng√†y
            üî¢ **S·ªë l∆∞·ª£ng:** T·ªëi ƒëa 100 tin nh·∫Øn m·ªói l·∫ßn
            ‚ùå **Kh√¥ng ho√†n t√°c:** H√†nh ƒë·ªông kh√¥ng th·ªÉ ho√†n t√°c
            ‚è±Ô∏è **Cooldown:** C√≥ gi·ªõi h·∫°n th·ªùi gian s·ª≠ d·ª•ng
            """,
            inline=False
        )

        # Examples
        embed.add_field(
            name="üí° V√≠ d·ª• s·ª≠ d·ª•ng",
            value="""
            `/clear amount:50 user:@spam_user` - X√≥a 50 tin nh·∫Øn c·ªßa user
            `/clear amount:20 contains:spam` - X√≥a tin nh·∫Øn ch·ª©a "spam"
            `/purge-bots amount:30` - X√≥a 30 tin nh·∫Øn t·ª´ bot
            `/purge-regex pattern:\\d{4,}` - X√≥a tin nh·∫Øn c√≥ 4+ s·ªë li√™n ti·∫øp
            """,
            inline=False
        )

        embed.set_thumbnail(url=self.bot.user.display_avatar.url)
        embed.set_footer(
            text="Message Cleaner v2.0 ‚Ä¢ Use responsibly",
            icon_url=self.bot.user.display_avatar.url
        )

        await interaction.response.send_message(embed=embed, ephemeral=True)


def setup(bot: ClientUser):
    bot.add_cog(Purge(bot))
