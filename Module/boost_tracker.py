import disnake
from disnake.ext import commands
from datetime import datetime, timedelta
from typing import Optional, Dict, List
import json
import os
import asyncio
from utils.ClientUser import ClientUser


class BoostView(disnake.ui.View):
    """View cho boost notification v·ªõi buttons t∆∞∆°ng t√°c"""
    
    def __init__(self, bot: 'ClientUser', booster: disnake.Member):
        super().__init__(timeout=300)
        self.bot = bot
        self.booster = booster
    
    @disnake.ui.button(
        label="üéâ C·∫£m ∆°n",
        style=disnake.ButtonStyle.primary,
        emoji="üéâ"
    )
    async def thank_booster(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        """Button c·∫£m ∆°n booster"""
        embed = disnake.Embed(
            title="üíñ C·∫£m ∆°n b·∫°n!",
            description=f"**{interaction.author.mention}** ƒë√£ g·ª≠i l·ªùi c·∫£m ∆°n ƒë·∫øn {self.booster.mention} v√¨ ƒë√£ boost server! üöÄ",
            color=0xFF69B4
        )
        embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/1211567863538786334/1312988508645752892/ExuEyes.gif")
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @disnake.ui.button(
        label="üìä Th·ªëng k√™ Boost",
        style=disnake.ButtonStyle.secondary,
        emoji="üìä"
    )
    async def boost_stats(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        """Hi·ªÉn th·ªã th·ªëng k√™ boost"""
        guild = interaction.guild
        
        embed = disnake.Embed(
            title="üìä Th·ªëng k√™ Server Boost",
            color=0x9B59B6,
            timestamp=datetime.now()
        )
        
        # Server boost info
        boost_count = guild.premium_subscription_count or 0
        boost_tier = guild.premium_tier
        
        # Tier benefits
        tier_benefits = {
            0: "‚Ä¢ 50 emoji slots\n‚Ä¢ 8MB upload limit",
            1: "‚Ä¢ 100 emoji slots\n‚Ä¢ 8MB upload limit\n‚Ä¢ Better audio quality",
            2: "‚Ä¢ 150 emoji slots\n‚Ä¢ 50MB upload limit\n‚Ä¢ 1080p screen share\n‚Ä¢ Server banner",
            3: "‚Ä¢ 250 emoji slots\n‚Ä¢ 100MB upload limit\n‚Ä¢ Animated server icon\n‚Ä¢ Vanity URL"
        }
        
        embed.add_field(
            name="üöÄ Boost hi·ªán t·∫°i",
            value=f"**S·ªë boost:** {boost_count}\n**Tier:** {boost_tier}/3",
            inline=True
        )
        
        embed.add_field(
            name="üéÅ L·ª£i √≠ch Tier hi·ªán t·∫°i",
            value=tier_benefits.get(boost_tier, "Kh√¥ng c√≥"),
            inline=True
        )
        
        # Next tier requirements
        next_tier_requirements = {0: 2, 1: 7, 2: 14, 3: None}
        next_requirement = next_tier_requirements.get(boost_tier)
        
        if next_requirement:
            remaining = next_requirement - boost_count
            embed.add_field(
                name="‚¨ÜÔ∏è Tier ti·∫øp theo",
                value=f"C·∫ßn th√™m **{remaining}** boost ƒë·ªÉ ƒë·∫°t Tier {boost_tier + 1}",
                inline=False
            )
        else:
            embed.add_field(
                name="üëë ƒê√£ ƒë·∫°t Tier t·ªëi ƒëa!",
                value="Server ƒë√£ ƒë·∫°t Tier 3 - cao nh·∫•t!",
                inline=False
            )
        
        embed.set_footer(text=f"Th·ªëng k√™ c·ªßa {guild.name}")
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @disnake.ui.button(
        label="üéÅ Ph·∫ßn th∆∞·ªüng",
        style=disnake.ButtonStyle.success,
        emoji="üéÅ"
    )
    async def boost_rewards(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        """Hi·ªÉn th·ªã ph·∫ßn th∆∞·ªüng cho booster"""
        embed = disnake.Embed(
            title="üéÅ Ph·∫ßn th∆∞·ªüng Booster",
            description="**C·∫£m ∆°n b·∫°n ƒë√£ boost server! ƒê√¢y l√† nh·ªØng ƒë·∫∑c quy·ªÅn c·ªßa b·∫°n:**",
            color=0x00FF00
        )
        
        rewards = [
            "üëë **Role Booster** v·ªõi m√†u ƒë·∫∑c bi·ªát",
            "üé® **Quy·ªÅn thay ƒë·ªïi nickname** c·ªßa b·∫£n th√¢n",
            "üì± **∆Øu ti√™n k·∫øt n·ªëi** khi server ƒë·∫ßy",
            "üîä **Ch·∫•t l∆∞·ª£ng √¢m thanh cao** trong voice chat",
            "üìÅ **Upload file l·ªõn h∆°n** (t√πy theo tier)",
            "üé≠ **S·ª≠ d·ª•ng emoji** t·ª´ server kh√°c",
            "üí¨ **Badge Booster** tr√™n profile Discord",
            "üåü **ƒê∆∞·ª£c ghi nh·∫≠n** trong danh s√°ch boosters"
        ]
        
        embed.add_field(
            name="üéâ ƒê·∫∑c quy·ªÅn c·ªßa b·∫°n",
            value="\n".join(rewards),
            inline=False
        )
        
        embed.add_field(
            name="üíù C·∫£m ∆°n ƒë·∫∑c bi·ªát",
            value=f"Server {interaction.guild.name} tr√¢n tr·ªçng s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n!",
            inline=False
        )
        
        embed.set_thumbnail(url=self.booster.display_avatar.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)


class BoostTracker(commands.Cog):
    """Module theo d√µi v√† th√¥ng b√°o Server Boost ƒë·∫πp m·∫Øt"""
    
    def __init__(self, bot: ClientUser):
        self.bot = bot
        self.boost_data_file = 'data/boost_settings.json'
        self.boost_history_file = 'data/boost_history.json'
    
    async def load_boost_settings(self) -> Dict:
        """Load boost settings from file"""
        try:
            if os.path.exists(self.boost_data_file):
                with open(self.boost_data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except:
            return {}
    
    async def save_boost_settings(self, data: Dict):
        """Save boost settings to file"""
        try:
            os.makedirs('data', exist_ok=True)
            with open(self.boost_data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Error saving boost settings: {e}")
    
    async def load_boost_history(self) -> List:
        """Load boost history from file"""
        try:
            if os.path.exists(self.boost_history_file):
                with open(self.boost_history_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return []
        except:
            return []
    
    async def save_boost_history(self, data: List):
        """Save boost history to file"""
        try:
            os.makedirs('data', exist_ok=True)
            with open(self.boost_history_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Error saving boost history: {e}")
    
    @commands.Cog.listener()
    async def on_member_update(self, before: disnake.Member, after: disnake.Member):
        """Detect when someone boosts the server"""
        try:
            # Check if premium status changed
            before_boosting = before.premium_since is not None
            after_boosting = after.premium_since is not None

            # Someone started boosting
            if not before_boosting and after_boosting:
                await self.handle_new_boost(after)

            # Someone stopped boosting
            elif before_boosting and not after_boosting:
                await self.handle_boost_removed(after)

        except Exception as e:
            print(f"Error in on_member_update: {e}")
    
    async def handle_new_boost(self, member: disnake.Member):
        """Handle new boost notification"""
        try:
            settings = await self.load_boost_settings()
            guild_settings = settings.get(str(member.guild.id), {})

            # Check if boost notifications are enabled
            if not guild_settings.get('enabled', False):
                return

            # Get notification channel
            channel_id = guild_settings.get('channel_id')
            if not channel_id:
                return

            channel = self.bot.get_channel(channel_id)
            if not channel:
                return

            # Check if member actually has premium_since (for test command)
            if not member.premium_since:
                # For test purposes, use current time
                boost_time = datetime.now()
            else:
                boost_time = member.premium_since

            # Create beautiful boost notification
            embed = disnake.Embed(
                title="üöÄ SOMEONE BOOSTED THE SERVER! üöÄ",
                description=f"**{member.mention}** v·ª´a boost server v√† mang l·∫°i nh·ªØng l·ª£i √≠ch tuy·ªát v·ªùi cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi! üéâ",
                color=0xFF73FA,  # Discord Nitro pink
                timestamp=datetime.now()
            )

            # Add booster info
            embed.add_field(
                name="üë§ Booster",
                value=f"**{member.display_name}**\n{member.mention}",
                inline=True
            )

            # Add boost time
            embed.add_field(
                name="‚è∞ Th·ªùi gian boost",
                value=f"<t:{int(boost_time.timestamp())}:F>",
                inline=True
            )
            
            # Add server boost stats
            guild = member.guild
            boost_count = guild.premium_subscription_count or 0
            boost_tier = guild.premium_tier
            
            embed.add_field(
                name="üìä Th·ªëng k√™ Server",
                value=f"üöÄ **T·ªïng boost:** {boost_count}\nüëë **Tier:** {boost_tier}/3",
                inline=True
            )
            
            # Add tier progress
            next_tier_requirements = {0: 2, 1: 7, 2: 14, 3: None}
            next_requirement = next_tier_requirements.get(boost_tier)
            
            if next_requirement and boost_count < next_requirement:
                remaining = next_requirement - boost_count
                embed.add_field(
                    name="‚¨ÜÔ∏è Ti·∫øn ƒë·ªô Tier ti·∫øp theo",
                    value=f"C·∫ßn th√™m **{remaining}** boost ƒë·ªÉ ƒë·∫°t Tier {boost_tier + 1}",
                    inline=False
                )
            elif boost_tier == 3:
                embed.add_field(
                    name="üëë ƒê√£ ƒë·∫°t Tier t·ªëi ƒëa!",
                    value="Server ƒë√£ ƒë·∫°t Tier 3 - cao nh·∫•t c√≥ th·ªÉ!",
                    inline=False
                )
            
            # Add benefits
            tier_benefits = {
                1: "üéâ **Tier 1 Benefits:** Better audio quality, 100 emoji slots",
                2: "üéä **Tier 2 Benefits:** 1080p screen share, 50MB uploads, server banner",
                3: "üëë **Tier 3 Benefits:** Animated icon, vanity URL, 100MB uploads"
            }
            
            if boost_tier > 0:
                embed.add_field(
                    name="üéÅ L·ª£i √≠ch hi·ªán t·∫°i",
                    value=tier_benefits.get(boost_tier, ""),
                    inline=False
                )
            
            # Set booster avatar
            embed.set_thumbnail(url=member.display_avatar.url)
            
            # Add footer
            try:
                embed.set_footer(
                    text=f"C·∫£m ∆°n {member.display_name} ƒë√£ boost {guild.name}! üíñ",
                    icon_url=guild.icon.url if guild.icon else None
                )
            except:
                embed.set_footer(text=f"C·∫£m ∆°n {member.display_name} ƒë√£ boost server! üíñ")
            
            # Create view with buttons
            view = BoostView(self.bot, member)
            
            # Send notification
            message = await channel.send(
                content=f"üéâ **BOOST ALERT!** üéâ\n{member.mention} ƒë√£ boost server! H√£y c·∫£m ∆°n h·ªç! üíñ",
                embed=embed,
                view=view
            )
            
            # Save to boost history
            history = await self.load_boost_history()
            history.append({
                'user_id': member.id,
                'user_name': str(member),
                'guild_id': guild.id,
                'guild_name': guild.name,
                'boost_time': boost_time.isoformat(),
                'boost_count_after': boost_count,
                'tier_after': boost_tier,
                'message_id': message.id,
                'channel_id': channel.id
            })
            
            # Keep only last 100 boosts
            if len(history) > 100:
                history = history[-100:]
            
            await self.save_boost_history(history)
            
            # Add reaction to the message
            try:
                await message.add_reaction("üöÄ")
                await message.add_reaction("üíñ")
                await message.add_reaction("üéâ")
            except:
                pass
                
        except Exception as e:
            print(f"Error handling new boost: {e}")
    
    async def handle_boost_removed(self, member: disnake.Member):
        """Handle boost removal notification"""
        try:
            settings = await self.load_boost_settings()
            guild_settings = settings.get(str(member.guild.id), {})
            
            # Check if boost notifications are enabled
            if not guild_settings.get('enabled', False):
                return
            
            # Check if removal notifications are enabled
            if not guild_settings.get('notify_removal', False):
                return
            
            # Get notification channel
            channel_id = guild_settings.get('channel_id')
            if not channel_id:
                return
            
            channel = self.bot.get_channel(channel_id)
            if not channel:
                return
            
            # Create boost removal notification
            embed = disnake.Embed(
                title="üíî Boost Removed",
                description=f"**{member.mention}** ƒë√£ ng·ª´ng boost server.",
                color=0xFF6B6B,
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üë§ Member",
                value=f"{member.display_name}\n{member.mention}",
                inline=True
            )
            
            # Add current server stats
            guild = member.guild
            boost_count = guild.premium_subscription_count or 0
            boost_tier = guild.premium_tier
            
            embed.add_field(
                name="üìä Server Stats",
                value=f"üöÄ **Boosts:** {boost_count}\nüëë **Tier:** {boost_tier}/3",
                inline=True
            )
            
            embed.set_footer(text=f"C·∫£m ∆°n {member.display_name} ƒë√£ t·ª´ng boost server! üíô")
            
            await channel.send(embed=embed)
            
        except Exception as e:
            print(f"Error handling boost removal: {e}")

    @commands.slash_command(name="boost-setup", description="Thi·∫øt l·∫≠p th√¥ng b√°o boost cho server")
    @commands.has_permissions(manage_guild=True)
    async def boost_setup(
        self,
        interaction: disnake.ApplicationCommandInteraction,
        channel: disnake.TextChannel = commands.Param(description="K√™nh ƒë·ªÉ g·ª≠i th√¥ng b√°o boost"),
        enable_removal_notifications: bool = commands.Param(description="Th√¥ng b√°o khi ai ƒë√≥ ng·ª´ng boost", default=False)
    ):
        """Thi·∫øt l·∫≠p h·ªá th·ªëng th√¥ng b√°o boost"""

        settings = await self.load_boost_settings()

        settings[str(interaction.guild.id)] = {
            'enabled': True,
            'channel_id': channel.id,
            'notify_removal': enable_removal_notifications,
            'setup_by': interaction.author.id,
            'setup_time': datetime.now().isoformat()
        }

        await self.save_boost_settings(settings)

        embed = disnake.Embed(
            title="‚úÖ Boost Tracker ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p!",
            description=f"**H·ªá th·ªëng th√¥ng b√°o boost ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng!**",
            color=0x00FF00,
            timestamp=datetime.now()
        )

        embed.add_field(
            name="üìç K√™nh th√¥ng b√°o",
            value=channel.mention,
            inline=True
        )

        embed.add_field(
            name="üîî Th√¥ng b√°o ng·ª´ng boost",
            value="‚úÖ B·∫≠t" if enable_removal_notifications else "‚ùå T·∫Øt",
            inline=True
        )

        embed.add_field(
            name="üë§ Thi·∫øt l·∫≠p b·ªüi",
            value=interaction.author.mention,
            inline=True
        )

        embed.add_field(
            name="üéâ T√≠nh nƒÉng",
            value="‚Ä¢ Th√¥ng b√°o t·ª± ƒë·ªông khi c√≥ boost m·ªõi\n"
                  "‚Ä¢ Hi·ªÉn th·ªã th·ªëng k√™ server\n"
                  "‚Ä¢ Buttons t∆∞∆°ng t√°c ƒë·∫πp m·∫Øt\n"
                  "‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô tier\n"
                  "‚Ä¢ L∆∞u l·ªãch s·ª≠ boost",
            inline=False
        )

        embed.set_footer(text="Boost Tracker ‚Ä¢ Powered by Hatsune Miku Bot")
        embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/1211567863538786334/1312988508645752892/ExuEyes.gif")

        await interaction.response.send_message(embed=embed)

    @commands.slash_command(name="boost-disable", description="T·∫Øt th√¥ng b√°o boost cho server")
    @commands.has_permissions(manage_guild=True)
    async def boost_disable(self, interaction: disnake.ApplicationCommandInteraction):
        """T·∫Øt h·ªá th·ªëng th√¥ng b√°o boost"""

        settings = await self.load_boost_settings()

        if str(interaction.guild.id) not in settings:
            await interaction.response.send_message("‚ùå Boost tracker ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p cho server n√†y!", ephemeral=True)
            return

        settings[str(interaction.guild.id)]['enabled'] = False
        await self.save_boost_settings(settings)

        embed = disnake.Embed(
            title="üîï Boost Tracker ƒë√£ ƒë∆∞·ª£c t·∫Øt",
            description="H·ªá th·ªëng th√¥ng b√°o boost ƒë√£ ƒë∆∞·ª£c t·∫Øt. S·ª≠ d·ª•ng `/boost-setup` ƒë·ªÉ b·∫≠t l·∫°i.",
            color=0xFF6B6B
        )

        await interaction.response.send_message(embed=embed)

    @commands.slash_command(name="boost-stats", description="Xem th·ªëng k√™ boost c·ªßa server")
    async def boost_stats(self, interaction: disnake.ApplicationCommandInteraction):
        """Hi·ªÉn th·ªã th·ªëng k√™ boost chi ti·∫øt"""

        guild = interaction.guild

        embed = disnake.Embed(
            title=f"üìä Th·ªëng k√™ Boost - {guild.name}",
            color=0xFF73FA,
            timestamp=datetime.now()
        )

        # Current boost info
        boost_count = guild.premium_subscription_count or 0
        boost_tier = guild.premium_tier
        boosters = [member for member in guild.members if member.premium_since]

        embed.add_field(
            name="üöÄ Boost hi·ªán t·∫°i",
            value=f"**S·ªë boost:** {boost_count}\n**Tier:** {boost_tier}/3\n**Boosters:** {len(boosters)}",
            inline=True
        )

        # Tier benefits
        tier_benefits = {
            0: "‚Ä¢ 50 emoji slots\n‚Ä¢ 8MB upload limit",
            1: "‚Ä¢ 100 emoji slots\n‚Ä¢ Better audio quality\n‚Ä¢ 8MB upload limit",
            2: "‚Ä¢ 150 emoji slots\n‚Ä¢ 50MB upload limit\n‚Ä¢ 1080p screen share\n‚Ä¢ Server banner",
            3: "‚Ä¢ 250 emoji slots\n‚Ä¢ 100MB upload limit\n‚Ä¢ Animated server icon\n‚Ä¢ Vanity URL"
        }

        embed.add_field(
            name="üéÅ L·ª£i √≠ch hi·ªán t·∫°i",
            value=tier_benefits.get(boost_tier, "Kh√¥ng c√≥"),
            inline=True
        )

        # Next tier requirements
        next_tier_requirements = {0: 2, 1: 7, 2: 14, 3: None}
        next_requirement = next_tier_requirements.get(boost_tier)

        if next_requirement:
            remaining = max(0, next_requirement - boost_count)
            progress = min(100, (boost_count / next_requirement) * 100)
            progress_bar = "‚ñà" * int(progress / 10) + "‚ñë" * (10 - int(progress / 10))

            embed.add_field(
                name=f"‚¨ÜÔ∏è Ti·∫øn ƒë·ªô Tier {boost_tier + 1}",
                value=f"`{progress_bar}` {progress:.1f}%\nC·∫ßn th√™m **{remaining}** boost",
                inline=False
            )
        else:
            embed.add_field(
                name="üëë ƒê√£ ƒë·∫°t Tier t·ªëi ƒëa!",
                value="Server ƒë√£ ƒë·∫°t Tier 3 - cao nh·∫•t c√≥ th·ªÉ!",
                inline=False
            )

        # Recent boosters (last 5)
        if boosters:
            try:
                recent_boosters = sorted(
                    [b for b in boosters if b.premium_since],
                    key=lambda m: m.premium_since,
                    reverse=True
                )[:5]
                booster_list = []
                for booster in recent_boosters:
                    boost_time = f"<t:{int(booster.premium_since.timestamp())}:R>"
                    booster_list.append(f"‚Ä¢ {booster.mention} - {boost_time}")

                if booster_list:
                    embed.add_field(
                        name="üåü Boosters g·∫ßn ƒë√¢y",
                        value="\n".join(booster_list),
                        inline=False
                    )
            except Exception as e:
                print(f"Error processing recent boosters: {e}")

        embed.set_footer(text=f"Server ID: {guild.id}")
        if guild.icon:
            embed.set_thumbnail(url=guild.icon.url)

        await interaction.response.send_message(embed=embed)

    @commands.slash_command(name="boost-history", description="Xem l·ªãch s·ª≠ boost c·ªßa server")
    @commands.has_permissions(manage_guild=True)
    async def boost_history(self, interaction: disnake.ApplicationCommandInteraction):
        """Hi·ªÉn th·ªã l·ªãch s·ª≠ boost"""

        history = await self.load_boost_history()
        guild_history = [entry for entry in history if entry['guild_id'] == interaction.guild.id]

        if not guild_history:
            embed = disnake.Embed(
                title="üìã L·ªãch s·ª≠ Boost",
                description="Ch∆∞a c√≥ l·ªãch s·ª≠ boost n√†o ƒë∆∞·ª£c ghi nh·∫≠n cho server n√†y.",
                color=0x7289DA
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        embed = disnake.Embed(
            title=f"üìã L·ªãch s·ª≠ Boost - {interaction.guild.name}",
            description=f"Hi·ªÉn th·ªã {len(guild_history)} boost g·∫ßn ƒë√¢y:",
            color=0xFF73FA,
            timestamp=datetime.now()
        )

        # Show last 10 boosts
        recent_history = guild_history[-10:]

        for i, entry in enumerate(reversed(recent_history), 1):
            try:
                boost_time = datetime.fromisoformat(entry['boost_time'])
                time_str = f"<t:{int(boost_time.timestamp())}:F>"

                embed.add_field(
                    name=f"üöÄ Boost #{len(guild_history) - i + 1}",
                    value=f"**User:** {entry.get('user_name', 'Unknown')}\n"
                          f"**Time:** {time_str}\n"
                          f"**Tier after:** {entry.get('tier_after', 0)}/3",
                    inline=True
                )
            except Exception as e:
                print(f"Error processing boost history entry: {e}")
                continue

        embed.set_footer(text=f"T·ªïng c·ªông {len(guild_history)} boost ‚Ä¢ Hi·ªÉn th·ªã 10 g·∫ßn nh·∫•t")

        await interaction.response.send_message(embed=embed, ephemeral=True)

    @commands.slash_command(name="boost-test", description="Test th√¥ng b√°o boost (ch·ªâ admin)")
    @commands.has_permissions(administrator=True)
    async def boost_test(self, interaction: disnake.ApplicationCommandInteraction):
        """Test boost notification"""
        try:
            settings = await self.load_boost_settings()
            guild_settings = settings.get(str(interaction.guild.id), {})

            if not guild_settings.get('enabled', False):
                await interaction.response.send_message("‚ùå Boost tracker ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p! S·ª≠ d·ª•ng `/boost-setup` tr∆∞·ªõc.", ephemeral=True)
                return

            # Simulate boost notification
            await self.handle_new_boost(interaction.author)

            embed = disnake.Embed(
                title="‚úÖ Test th√†nh c√¥ng!",
                description="Th√¥ng b√°o boost test ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn k√™nh ƒë√£ thi·∫øt l·∫≠p.",
                color=0x00FF00
            )

            await interaction.response.send_message(embed=embed, ephemeral=True)

        except Exception as e:
            embed = disnake.Embed(
                title="‚ùå L·ªói test boost",
                description=f"C√≥ l·ªói x·∫£y ra: {str(e)}",
                color=0xFF6B6B
            )
            try:
                await interaction.response.send_message(embed=embed, ephemeral=True)
            except:
                await interaction.followup.send(embed=embed, ephemeral=True)


def setup(bot: ClientUser):
    bot.add_cog(BoostTracker(bot))
